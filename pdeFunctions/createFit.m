function [fitresult, gof] = createFit(ghsv_1, X_CO2)
    %CREATEFIT(GHSV_1,X_CO2)
    %  Create a fit.
    %
    %  Data for 'untitled fit 1' fit:
    %      X Input: ghsv_1
    %      Y Output: X_CO2
    %  Output:
    %      fitresult : a fit object representing the fit.
    %      gof : structure with goodness-of fit info.
    %
    %  See also FIT, CFIT, SFIT.
    
    %  Auto-generated by MATLAB on 30-Jan-2024 15:39:51
    
    
    % Fit: 'untitled fit 1'.
    [xData, yData] = prepareCurveData( ghsv_1, X_CO2 );
    
    % Set up fittype and options.
    ft = fittype( 'smoothingspline' );
    % Fit model to data.
    % [fitresult, gof] = fit( xData, yData, ft );
    [fitresultObj, gof] = fit(xData, yData, ft); % Original fit object
    % Wrap the fitresult to ensure non-negative values
    % Truncate negative values to zero
    fitresult = @(x) max(feval(fitresultObj, x), 0);



    % ---------------------------------------------------------------------
%     ft = fittype(@(a, b, c, x) max(a*x.^2 + b*x + c, 0), ...
%                  'independent', 'x', 'coefficients', {'a', 'b', 'c'});
% 
%     % Set up fit options with initial guesses
%     opts = fitoptions('Method', 'NonlinearLeastSquares');
%     opts.StartPoint = [1, 1, 0]; % Initial guesses for a, b, c
% 
%         % Fit model to data
%     [fitresult, gof] = fit(xData, yData, ft, opts);

    % ---------------------------------------------------------------------

    % Plot fit with data.
    figure( 'Name', 'untitled fit 1' );
    % Use the original fit object for plotting
    h = plot(fitresultObj, xData, yData); 
    legend(h, 'X_CO2 vs. ghsv_1', 'untitled fit 1', 'Location', ...
           'NorthEast', 'Interpreter', 'none');
    
    % Label axes
    xlabel( 'ghsv_1', 'Interpreter', 'none' );
    ylabel( 'X_CO2', 'Interpreter', 'none' );
    grid on

%--------------------------------------------------------------------------

%     %CREATEFIT(GHSV_1,X_CO2,POLYORDER)
%     %  Create a polynomial fit with adjustable order and ensure non-negative predictions.
%     %
%     %  Inputs:
%     %      ghsv_1    : Independent variable (e.g., GHSV)
%     %      X_CO2     : Dependent variable (e.g., conversion of CO2)
%     %      polyOrder : Order of the polynomial to fit
%     %
%     %  Outputs:
%     %      fitresult : A function handle for the fit that ensures non-negative predictions
%     %      gof       : Structure with goodness-of-fit information
%     %
%     %  Example:
%     %      [fitresult, gof] = createFit(ghsv_1, X_CO2, 3);
% 
% 
%     polyOrder = 6;
% 
%     % Prepare the data
%     [xData, yData] = prepareCurveData(ghsv_1, X_CO2);
% 
%     % Generate polynomial terms dynamically
%     coeffNames = arrayfun(@(n) sprintf('a%d', n), 0:polyOrder, 'UniformOutput', false);
%     polyExpression = join(arrayfun(@(n) sprintf('a%d*x.^%d', polyOrder - n, n), 0:polyOrder, 'UniformOutput', false), ' + ');
% 
%     % Define the polynomial model with a non-negativity constraint
%     modelExpression = sprintf('max(%s, 0)', polyExpression{1});
%     ft = fittype(modelExpression, 'independent', 'x', 'coefficients', coeffNames);
% 
%     % Set up fit options with initial guesses
%     opts = fitoptions('Method', 'NonlinearLeastSquares');
%     opts.StartPoint = ones(1, polyOrder + 1); % Initial guesses for coefficients
% 
%     % Fit model to data
%     [fitresultObj, gof] = fit(xData, yData, ft, opts);
% 
%     % Wrap the fitresult to ensure non-negative predictions
%     fitresult = @(x) max(feval(fitresultObj, x), 0); % Truncate negative values to zero
% 
%     % Plot the original fit with the data
%     figure('Name', sprintf('Polynomial Fit (Order %d)', polyOrder));
%     h = plot(fitresultObj, xData, yData); % Use the original fit object for plotting
%     legend(h, 'X_CO2 vs. ghsv_1', sprintf('Polynomial Fit (Order %d)', polyOrder), 'Location', ...
%            'NorthEast', 'Interpreter', 'none');
% 
%     % Label axes
%     xlabel('ghsv_1', 'Interpreter', 'none');
%     ylabel('X_CO2', 'Interpreter', 'none');
%     grid on;

%--------------------------------------------------------------------------
end